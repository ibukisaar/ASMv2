#pragma once

#include "ASM.h"

// 此文件由 GCC 宏展开生成

namespace saar_asm {
	using saar::asm_t;

	using aaa = make_asm<0x37>;
	using aad = make_asm<0xD5, 0x0A>;
	using aam = make_asm<0xD4, 0x0A>;
	using aas = make_asm<0x3F>;
	using adc_al_i8 = make_asm<0x14, asm_t::byte>;
	using adc_ax_i16 = make_asm<0x66, 0x15, asm_t::word>;
	using adc_eax_i32 = make_asm<0x15, asm_t::dword>;
	using adc_r_i8 = make_asm<0x80, asm_t::reg | 2, asm_t::byte>;
	using adc_r_i16 = make_asm<0x66, 0x81, asm_t::reg | 2, asm_t::word>;
	using adc_r_i32 = make_asm<0x81, asm_t::reg | 2, asm_t::dword>;
	using adc_r16_i8 = make_asm<0x66, 0x83, asm_t::reg | 2, asm_t::byte>;
	using adc_r32_i8 = make_asm<0x83, asm_t::reg | 2, asm_t::byte>;
	using adc_m_i8 = make_asm<0x80, asm_t::mem | 2, asm_t::byte>;
	using adc_m_i16 = make_asm<0x66, 0x81, asm_t::mem | 2, asm_t::word>;
	using adc_m_i32 = make_asm<0x81, asm_t::mem | 2, asm_t::dword>;
	using adc_m16_i8 = make_asm<0x66, 0x83, asm_t::mem | 2, asm_t::byte>;
	using adc_m32_i8 = make_asm<0x83, asm_t::mem | 2, asm_t::byte>;
	using adc_r_r8 = make_asm<0x10, asm_t::reg2mreg>;
	using adc_r_r16 = make_asm<0x66, 0x11, asm_t::reg2mreg>;
	using adc_r_r32 = make_asm<0x11, asm_t::reg2mreg>;
	using adc_m_r8 = make_asm<0x10, asm_t::mem_reg>;
	using adc_m_r16 = make_asm<0x66, 0x11, asm_t::mem_reg>;
	using adc_m_r32 = make_asm<0x11, asm_t::mem_reg>;
	using adc_r_m8 = make_asm<0x12, asm_t::mem_reg>;
	using adc_r_m16 = make_asm<0x66, 0x13, asm_t::mem_reg>;
	using adc_r_m32 = make_asm<0x13, asm_t::mem_reg>;
	using add_al_i8 = make_asm<0x04, asm_t::byte>;
	using add_ax_i16 = make_asm<0x66, 0x05, asm_t::word>;
	using add_eax_i32 = make_asm<0x05, asm_t::dword>;
	using add_r_i8 = make_asm<0x80, asm_t::reg | 0, asm_t::byte>;
	using add_r_i16 = make_asm<0x66, 0x81, asm_t::reg | 0, asm_t::word>;
	using add_r_i32 = make_asm<0x81, asm_t::reg | 0, asm_t::dword>;
	using add_r16_i8 = make_asm<0x66, 0x83, asm_t::reg | 0, asm_t::byte>;
	using add_r32_i8 = make_asm<0x83, asm_t::reg | 0, asm_t::byte>;
	using add_m_i8 = make_asm<0x80, asm_t::mem | 0, asm_t::byte>;
	using add_m_i16 = make_asm<0x66, 0x81, asm_t::mem | 0, asm_t::word>;
	using add_m_i32 = make_asm<0x81, asm_t::mem | 0, asm_t::dword>;
	using add_m16_i8 = make_asm<0x66, 0x83, asm_t::mem | 0, asm_t::byte>;
	using add_m32_i8 = make_asm<0x83, asm_t::mem | 0, asm_t::byte>;
	using add_r_r8 = make_asm<0x00, asm_t::reg2mreg>;
	using add_r_r16 = make_asm<0x66, 0x01, asm_t::reg2mreg>;
	using add_r_r32 = make_asm<0x01, asm_t::reg2mreg>;
	using add_m_r8 = make_asm<0x00, asm_t::mem_reg>;
	using add_m_r16 = make_asm<0x66, 0x01, asm_t::mem_reg>;
	using add_m_r32 = make_asm<0x01, asm_t::mem_reg>;
	using add_r_m8 = make_asm<0x02, asm_t::mem_reg>;
	using add_r_m16 = make_asm<0x66, 0x03, asm_t::mem_reg>;
	using add_r_m32 = make_asm<0x03, asm_t::mem_reg>;
	using and_al_i8 = make_asm<0x24, asm_t::byte>;
	using and_ax_i16 = make_asm<0x66, 0x25, asm_t::word>;
	using and_eax_i32 = make_asm<0x25, asm_t::dword>;
	using and_r_i8 = make_asm<0x80, asm_t::reg | 4, asm_t::byte>;
	using and_r_i16 = make_asm<0x66, 0x81, asm_t::reg | 4, asm_t::word>;
	using and_r_i32 = make_asm<0x81, asm_t::reg | 4, asm_t::dword>;
	using and_r16_i8 = make_asm<0x66, 0x83, asm_t::reg | 4, asm_t::byte>;
	using and_r32_i8 = make_asm<0x83, asm_t::reg | 4, asm_t::byte>;
	using and_m_i8 = make_asm<0x80, asm_t::mem | 4, asm_t::byte>;
	using and_m_i16 = make_asm<0x66, 0x81, asm_t::mem | 4, asm_t::word>;
	using and_m_i32 = make_asm<0x81, asm_t::mem | 4, asm_t::dword>;
	using and_m16_i8 = make_asm<0x66, 0x83, asm_t::mem | 4, asm_t::byte>;
	using and_m32_i8 = make_asm<0x83, asm_t::mem | 4, asm_t::byte>;
	using and_r_r8 = make_asm<0x20, asm_t::reg2mreg>;
	using and_r_r16 = make_asm<0x66, 0x21, asm_t::reg2mreg>;
	using and_r_r32 = make_asm<0x21, asm_t::reg2mreg>;
	using and_m_r8 = make_asm<0x20, asm_t::mem_reg>;
	using and_m_r16 = make_asm<0x66, 0x21, asm_t::mem_reg>;
	using and_m_r32 = make_asm<0x21, asm_t::mem_reg>;
	using and_r_m8 = make_asm<0x22, asm_t::mem_reg>;
	using and_r_m16 = make_asm<0x66, 0x23, asm_t::mem_reg>;
	using and_r_m32 = make_asm<0x23, asm_t::mem_reg>;
	using arpl_r_r = make_asm<0x63, asm_t::reg2mreg>;
	using arpl_m_r = make_asm<0x63, asm_t::mem_reg>;
	using bound_r_r16 = make_asm<0x66, 0x62, asm_t::mreg2reg>;
	using bound_r_m16 = make_asm<0x66, 0x62, asm_t::mem_reg>;
	using bound_r_r32 = make_asm<0x62, asm_t::mreg2reg>;
	using bound_r_m32 = make_asm<0x62, asm_t::mem_reg>;
	using bsf_r_r16 = make_asm<0x66, 0xF0, 0xBC, asm_t::mreg2reg>;
	using bsf_r_m16 = make_asm<0x66, 0xF0, 0xBC, asm_t::mem_reg>;
	using bsf_r_r32 = make_asm<0xF0, 0xBC, asm_t::mreg2reg>;
	using bsf_r_m32 = make_asm<0xF0, 0xBC, asm_t::mem_reg>;
	using bsr_r_r16 = make_asm<0x66, 0x0F, 0xBD, asm_t::mreg2reg>;
	using bsr_r_m16 = make_asm<0x66, 0x0F, 0xBD, asm_t::mem_reg>;
	using bsr_r_r32 = make_asm<0x0F, 0xBD, asm_t::mreg2reg>;
	using bsr_r_m32 = make_asm<0x0F, 0xBD, asm_t::mem_reg>;
	using bt_r_r16 = make_asm<0x66, 0x0F, 0xA3, asm_t::reg2mreg>;
	using bt_m_r16 = make_asm<0x66, 0x0F, 0xA3, asm_t::mem_reg>;
	using bt_r_r32 = make_asm<0x0F, 0xA3, asm_t::reg2mreg>;
	using bt_m_r32 = make_asm<0x0F, 0xA3, asm_t::mem_reg>;
	using bt_r16_i8 = make_asm<0x66, 0x0F, 0xBA, asm_t::reg | 4, asm_t::byte>;
	using bt_m16_i8 = make_asm<0x66, 0x0F, 0xBA, asm_t::mem | 4, asm_t::byte>;
	using bt_r32_i8 = make_asm<0x0F, 0xBA, asm_t::reg | 4, asm_t::byte>;
	using bt_m32_i8 = make_asm<0x0F, 0xBA, asm_t::mem | 4, asm_t::byte>;
	using btc_r_r16 = make_asm<0x66, 0x0F, 0xBB, asm_t::reg2mreg>;
	using btc_m_r16 = make_asm<0x66, 0x0F, 0xBB, asm_t::mem_reg>;
	using btc_r_r32 = make_asm<0x0F, 0xBB, asm_t::reg2mreg>;
	using btc_m_r32 = make_asm<0x0F, 0xBB, asm_t::mem_reg>;
	using btc_r16_i8 = make_asm<0x66, 0x0F, 0xBA, asm_t::reg | 7, asm_t::byte>;
	using btc_m16_i8 = make_asm<0x66, 0x0F, 0xBA, asm_t::mem | 7, asm_t::byte>;
	using btc_r32_i8 = make_asm<0x0F, 0xBA, asm_t::reg | 7, asm_t::byte>;
	using btc_m32_i8 = make_asm<0x0F, 0xBA, asm_t::mem | 7, asm_t::byte>;
	using btr_r_r16 = make_asm<0x66, 0x0F, 0xB3, asm_t::reg2mreg>;
	using btr_m_r16 = make_asm<0x66, 0x0F, 0xB3, asm_t::mem_reg>;
	using btr_r_r32 = make_asm<0x0F, 0xB3, asm_t::reg2mreg>;
	using btr_m_r32 = make_asm<0x0F, 0xB3, asm_t::mem_reg>;
	using btr_r16_i8 = make_asm<0x66, 0x0F, 0xBA, asm_t::reg | 6, asm_t::byte>;
	using btr_m16_i8 = make_asm<0x66, 0x0F, 0xBA, asm_t::mem | 6, asm_t::byte>;
	using btr_r32_i8 = make_asm<0x0F, 0xBA, asm_t::reg | 6, asm_t::byte>;
	using btr_m32_i8 = make_asm<0x0F, 0xBA, asm_t::mem | 6, asm_t::byte>;
	using bts_r_r16 = make_asm<0x66, 0x0F, 0xAB, asm_t::reg2mreg>;
	using bts_m_r16 = make_asm<0x66, 0x0F, 0xAB, asm_t::mem_reg>;
	using bts_r_r32 = make_asm<0x0F, 0xAB, asm_t::reg2mreg>;
	using bts_m_r32 = make_asm<0x0F, 0xAB, asm_t::mem_reg>;
	using bts_r16_i8 = make_asm<0x66, 0x0F, 0xBA, asm_t::reg | 5, asm_t::byte>;
	using bts_m16_i8 = make_asm<0x66, 0x0F, 0xBA, asm_t::mem | 5, asm_t::byte>;
	using bts_r32_i8 = make_asm<0x0F, 0xBA, asm_t::reg | 5, asm_t::byte>;
	using bts_m32_i8 = make_asm<0x0F, 0xBA, asm_t::mem | 5, asm_t::byte>;
	using call_i32 = make_asm<0xE8, asm_t::dword>;
	using call_r = make_asm<0xFF, asm_t::reg | 2>;
	using call_m = make_asm<0xFF, asm_t::mem | 2>;
	using call_i32_i16 = make_asm<0x9A, 0xCD, asm_t::dword, asm_t::word>;
	using cbw = make_asm<0x66, 0x98>;
	using cwde = make_asm<0x98>;
	using clc = make_asm<0xF8>;
	using cld = make_asm<0xFC>;
	using cli = make_asm<0xFA>;
	using clts = make_asm<0x0F, 0x06>;
	using cmc = make_asm<0xF5>;
	using cmp_al_i8 = make_asm<0x3C, asm_t::byte>;
	using cmp_ax_i16 = make_asm<0x66, 0x3D, asm_t::word>;
	using cmp_eax_i32 = make_asm<0x3D, asm_t::dword>;
	using cmp_r_i8 = make_asm<0x80, asm_t::reg | 7, asm_t::byte>;
	using cmp_r_i16 = make_asm<0x66, 0x81, asm_t::reg | 7, asm_t::word>;
	using cmp_r_i32 = make_asm<0x81, asm_t::reg | 7, asm_t::dword>;
	using cmp_r16_i8 = make_asm<0x66, 0x83, asm_t::reg | 7, asm_t::byte>;
	using cmp_r32_i8 = make_asm<0x83, asm_t::reg | 7, asm_t::byte>;
	using cmp_m_i8 = make_asm<0x80, asm_t::mem | 7, asm_t::byte>;
	using cmp_m_i16 = make_asm<0x66, 0x81, asm_t::mem | 7, asm_t::word>;
	using cmp_m_i32 = make_asm<0x81, asm_t::mem | 7, asm_t::dword>;
	using cmp_m16_i8 = make_asm<0x66, 0x83, asm_t::mem | 7, asm_t::byte>;
	using cmp_m32_i8 = make_asm<0x83, asm_t::mem | 7, asm_t::byte>;
	using cmp_r_r8 = make_asm<0x38, asm_t::reg2mreg>;
	using cmp_r_r16 = make_asm<0x66, 0x39, asm_t::reg2mreg>;
	using cmp_r_r32 = make_asm<0x39, asm_t::reg2mreg>;
	using cmp_m_r8 = make_asm<0x38, asm_t::mem_reg>;
	using cmp_m_r16 = make_asm<0x66, 0x39, asm_t::mem_reg>;
	using cmp_m_r32 = make_asm<0x39, asm_t::mem_reg>;
	using cmp_r_m8 = make_asm<0x3A, asm_t::mem_reg>;
	using cmp_r_m16 = make_asm<0x66, 0x3B, asm_t::mem_reg>;
	using cmp_r_m32 = make_asm<0x3B, asm_t::mem_reg>;
	using cmpsb = make_asm<0xA6>;
	using cmpsw = make_asm<0x66, 0xA7>;
	using cmpsd = make_asm<0xA7>;
	using cwd = make_asm<0x66, 0x99>;
	using cdq = make_asm<0x99>;
	using daa = make_asm<0x27>;
	using das = make_asm<0x2F>;
	using dec_r8 = make_asm<0xFE, asm_t::reg | 1>;
	using dec_r16 = make_asm<0x66, 0x48 | asm_t::op_reg>;
	using dec_r32 = make_asm<0x48 | asm_t::op_reg>;
	using dec_m8 = make_asm<0xFE, asm_t::mem | 1>;
	using dec_m16 = make_asm<0x66, 0xFF, asm_t::mem | 1>;
	using dec_m32 = make_asm<0xFF, asm_t::mem | 1>;
	using div_al_r8 = make_asm<0xF6, asm_t::reg | 6>;
	using div_ax_r16 = make_asm<0x66, 0xF7, asm_t::reg | 6>;
	using div_eax_r32 = make_asm<0xF7, asm_t::reg | 6>;
	using div_al_m8 = make_asm<0xF6, asm_t::mem | 6>;
	using div_ax_m16 = make_asm<0x66, 0xF7, asm_t::mem | 6>;
	using div_eax_m32 = make_asm<0xF7, asm_t::mem | 6>;
	using enter = make_asm<0xC8, asm_t::word, asm_t::byte>;
	using hlt = make_asm<0xF4>;
	using idiv_al_r8 = make_asm<0xF6, asm_t::reg | 7>;
	using idiv_ax_r16 = make_asm<0x66, 0xF7, asm_t::reg | 7>;
	using idiv_eax_r32 = make_asm<0xF7, asm_t::reg | 7>;
	using idiv_al_m8 = make_asm<0xF6, asm_t::mem | 7>;
	using idiv_ax_m16 = make_asm<0x66, 0xF7, asm_t::mem | 7>;
	using idiv_eax_m32 = make_asm<0xF7, asm_t::mem | 7>;
	using imul_al_r8 = make_asm<0xF6, asm_t::reg | 5>;
	using imul_ax_r16 = make_asm<0x66, 0xF7, asm_t::reg | 5>;
	using imul_eax_r32 = make_asm<0xF7, asm_t::reg | 5>;
	using imul_al_m8 = make_asm<0xF6, asm_t::mem | 5>;
	using imul_ax_m16 = make_asm<0x66, 0xF7, asm_t::mem | 5>;
	using imul_eax_m32 = make_asm<0xF7, asm_t::mem | 5>;
	using imul_r_r16 = make_asm<0x66, 0x0F, 0xAF, asm_t::mreg2reg>;
	using imul_r_r32 = make_asm<0x0F, 0xAF, asm_t::mreg2reg>;
	using imul_r_m16 = make_asm<0x66, 0x0F, 0xAF, asm_t::mem_reg>;
	using imul_r_m32 = make_asm<0x0F, 0xAF, asm_t::mem_reg>;
	using imul_r_r16_i8 = make_asm<0x66, 0x6B, asm_t::mreg2reg, asm_t::byte>;
	using imul_r_r32_i8 = make_asm<0x6B, asm_t::mreg2reg, asm_t::byte>;
	using imul_r_m16_i8 = make_asm<0x66, 0x6B, asm_t::mem_reg, asm_t::byte>;
	using imul_r_m32_i8 = make_asm<0x6B, asm_t::mem_reg, asm_t::byte>;
	using imul_r_r16_i16 = make_asm<0x66, 0x69, asm_t::mreg2reg, asm_t::word>;
	using imul_r_r32_i32 = make_asm<0x69, asm_t::mreg2reg, asm_t::dword>;
	using imul_r_m16_i16 = make_asm<0x66, 0x69, asm_t::mem_reg, asm_t::word>;
	using imul_r_m32_i32 = make_asm<0x69, asm_t::mem_reg, asm_t::dword>;
	using in_al = make_asm<0xE4, asm_t::byte>;
	using in_ax = make_asm<0x66, 0xE5, asm_t::byte>;
	using in_eax = make_asm<0xE5, asm_t::byte>;
	using in_al_dx = make_asm<0xEC>;
	using in_ax_dx = make_asm<0x66, 0xED>;
	using in_eax_dx = make_asm<0xED>;
	using inc_r8 = make_asm<0xFE, asm_t::reg | 0>;
	using inc_r16 = make_asm<0x66, 0x40 | asm_t::op_reg>;
	using inc_r32 = make_asm<0x40 | asm_t::op_reg>;
	using inc_m8 = make_asm<0xFE, asm_t::mem | 0>;
	using inc_m16 = make_asm<0x66, 0xFF, asm_t::mem | 0>;
	using inc_m32 = make_asm<0xFF, asm_t::mem | 0>;
	using insb = make_asm<0x6C>;
	using insw = make_asm<0x66, 0x6D>;
	using insd = make_asm<0x6D>;
	using int_3 = make_asm<0xCC>;
	using int_i8 = make_asm<0xCD, asm_t::byte>;
	using into = make_asm<0xCE>;
	using iret = make_asm<0x66, 0xCF>;
	using iretd = make_asm<0xCF>;
	using ja_i8 = make_asm<0x77, asm_t::byte>;
	using ja_i32 = make_asm<0x0F, 0x87, asm_t::dword>;
	using jae_i8 = make_asm<0x73, asm_t::byte>;
	using jae_i32 = make_asm<0x0F, 0x83, asm_t::dword>;
	using jb_i8 = make_asm<0x72, asm_t::byte>;
	using jb_i32 = make_asm<0x0F, 0x82, asm_t::dword>;
	using jbe_i8 = make_asm<0x76, asm_t::byte>;
	using jbe_i32 = make_asm<0x0F, 0x86, asm_t::dword>;
	using jc_i8 = make_asm<0x72, asm_t::byte>;
	using jc_i32 = make_asm<0x0F, 0x82, asm_t::dword>;
	using je_i8 = make_asm<0x74, asm_t::byte>;
	using je_i32 = make_asm<0x0F, 0x84, asm_t::dword>;
	using jg_i8 = make_asm<0x7F, asm_t::byte>;
	using jg_i32 = make_asm<0x0F, 0x8F, asm_t::dword>;
	using jge_i8 = make_asm<0x7D, asm_t::byte>;
	using jge_i32 = make_asm<0x0F, 0x8D, asm_t::dword>;
	using jl_i8 = make_asm<0x7C, asm_t::byte>;
	using jl_i32 = make_asm<0x0F, 0x8C, asm_t::dword>;
	using jle_i8 = make_asm<0x7E, asm_t::byte>;
	using jle_i32 = make_asm<0x0F, 0x8E, asm_t::dword>;
	using jna_i8 = make_asm<0x76, asm_t::byte>;
	using jna_i32 = make_asm<0x0F, 0x86, asm_t::dword>;
	using jnae_i8 = make_asm<0x72, asm_t::byte>;
	using jnae_i32 = make_asm<0x0F, 0x82, asm_t::dword>;
	using jnb_i8 = make_asm<0x73, asm_t::byte>;
	using jnb_i32 = make_asm<0x0F, 0x83, asm_t::dword>;
	using jnbe_i8 = make_asm<0x77, asm_t::byte>;
	using jnbe_i32 = make_asm<0x0F, 0x87, asm_t::dword>;
	using jnc_i8 = make_asm<0x73, asm_t::byte>;
	using jnc_i32 = make_asm<0x0F, 0x83, asm_t::dword>;
	using jne_i8 = make_asm<0x75, asm_t::byte>;
	using jne_i32 = make_asm<0x0F, 0x85, asm_t::dword>;
	using jng_i8 = make_asm<0x7E, asm_t::byte>;
	using jng_i32 = make_asm<0x0F, 0x8E, asm_t::dword>;
	using jnge_i8 = make_asm<0x7C, asm_t::byte>;
	using jnge_i32 = make_asm<0x0F, 0x8C, asm_t::dword>;
	using jnl_i8 = make_asm<0x7D, asm_t::byte>;
	using jnl_i32 = make_asm<0x0F, 0x8D, asm_t::dword>;
	using jnle_i8 = make_asm<0x7F, asm_t::byte>;
	using jnle_i32 = make_asm<0x0F, 0x8F, asm_t::dword>;
	using jno_i8 = make_asm<0x71, asm_t::byte>;
	using jno_i32 = make_asm<0x0F, 0x81, asm_t::dword>;
	using jnp_i8 = make_asm<0x7B, asm_t::byte>;
	using jnp_i32 = make_asm<0x0F, 0x8B, asm_t::dword>;
	using jns_i8 = make_asm<0x79, asm_t::byte>;
	using jns_i32 = make_asm<0x0F, 0x89, asm_t::dword>;
	using jnz_i8 = make_asm<0x75, asm_t::byte>;
	using jnz_i32 = make_asm<0x0F, 0x85, asm_t::dword>;
	using jo_i8 = make_asm<0x70, asm_t::byte>;
	using jo_i32 = make_asm<0x0F, 0x80, asm_t::dword>;
	using jp_i8 = make_asm<0x7A, asm_t::byte>;
	using jp_i32 = make_asm<0x0F, 0x8A, asm_t::dword>;
	using jpe_i8 = make_asm<0x7A, asm_t::byte>;
	using jpe_i32 = make_asm<0x0F, 0x8A, asm_t::dword>;
	using jpo_i8 = make_asm<0x7B, asm_t::byte>;
	using jpo_i32 = make_asm<0x0F, 0x8B, asm_t::dword>;
	using js_i8 = make_asm<0x78, asm_t::byte>;
	using js_i32 = make_asm<0x0F, 0x88, asm_t::dword>;
	using jz_i8 = make_asm<0x74, asm_t::byte>;
	using jz_i32 = make_asm<0x0F, 0x84, asm_t::dword>;
	using jcxz = make_asm<0xE3, asm_t::byte>;
	using jeczx = make_asm<0xE3, asm_t::byte>;
	using jmp_i8 = make_asm<0xEB, asm_t::byte>;
	using jmp_i16 = make_asm<0x66, 0xE9, asm_t::word>;
	using jmp_i32 = make_asm<0xE9, asm_t::dword>;
	using jmp_i32_i16 = make_asm<0xEA, asm_t::dword, asm_t::word>;
	using jmp_r = make_asm<0xFF, asm_t::reg | 4>;
	using jmp_m = make_asm<0xFF, asm_t::mem | 4>;
	using lahf = make_asm<0x9F>;
	using lar_r_r16 = make_asm<0x66, 0x0F, 0x02, asm_t::mreg2reg>;
	using lar_r_m16 = make_asm<0x66, 0x0F, 0x02, asm_t::mem_reg>;
	using lar_r_r32 = make_asm<0x0F, 0x02, asm_t::mreg2reg>;
	using lar_r_m32 = make_asm<0x0F, 0x02, asm_t::mem_reg>;
	using lea_r16 = make_asm<0x66, 0x8D, asm_t::mem_reg>;
	using lea_r32 = make_asm<0x8D, asm_t::mem_reg>;
	using leave_16 = make_asm<0x66, 0xC9>;
	using leave_32 = make_asm<0xC9>;
	using lgdt = make_asm<0x0F, 0x01, asm_t::mem | 2>;
	using lidt = make_asm<0x0F, 0x01, asm_t::mem | 3>;
	using lds_r_m16 = make_asm<0x66, 0xC5, asm_t::mem_reg>;
	using lds_r_m32 = make_asm<0xC5, asm_t::mem_reg>;
	using lss_r_m16 = make_asm<0x66, 0x0F, 0xB2, asm_t::mem_reg>;
	using lss_r_m32 = make_asm<0x0F, 0xB2, asm_t::mem_reg>;
	using les_r_m16 = make_asm<0x66, 0xC4, asm_t::mem_reg>;
	using les_r_m32 = make_asm<0xC4, asm_t::mem_reg>;
	using lfs_r_m16 = make_asm<0x66, 0x0F, 0xB4, asm_t::mem_reg>;
	using lfs_r_m32 = make_asm<0x0F, 0xB4, asm_t::mem_reg>;
	using lgs_r_m16 = make_asm<0x66, 0x0F, 0xB5, asm_t::mem_reg>;
	using lgs_r_m32 = make_asm<0x0F, 0xB5, asm_t::mem_reg>;
	using lldt_r = make_asm<0x0F, 0x00, asm_t::reg | 2>;
	using lldt_m = make_asm<0x0F, 0x00, asm_t::mem | 2>;
	using lmsw_r = make_asm<0x0F, 0x01, asm_t::reg | 6>;
	using lmsw_m = make_asm<0x0F, 0x01, asm_t::mem | 6>;
	using lock = make_asm<0xF0>;
	using lodsb = make_asm<0xAC>;
	using lodsw = make_asm<0x66, 0xAD>;
	using lodsd = make_asm<0xAD>;
	using loop = make_asm<0xE2, asm_t::byte>;
	using loope = make_asm<0xE1, asm_t::byte>;
	using loopz = make_asm<0xE1, asm_t::byte>;
	using loopne = make_asm<0xE0, asm_t::byte>;
	using loopnz = make_asm<0xE0, asm_t::byte>;
	using lsl_r_r16 = make_asm<0x66, 0x0F, 0x03, asm_t::mreg2reg>;
	using lsl_r_r32 = make_asm<0x0F, 0x03, asm_t::mreg2reg>;
	using lsl_r_m16 = make_asm<0x66, 0x0F, 0x03, asm_t::mem_reg>;
	using lsl_r_m32 = make_asm<0x0F, 0x03, asm_t::mem_reg>;
	using ltr_r = make_asm<0x0F, 0x00, asm_t::reg | 3>;
	using ltr_m = make_asm<0x0F, 0x00, asm_t::mem | 3>;
	using mov_r_r8 = make_asm<0x88, asm_t::reg2mreg>;
	using mov_r_r16 = make_asm<0x66, 0x89, asm_t::reg2mreg>;
	using mov_r_r32 = make_asm<0x89, asm_t::reg2mreg>;
	using mov_m_r8 = make_asm<0x88, asm_t::mem_reg>;
	using mov_m_r16 = make_asm<0x66, 0x89, asm_t::mem_reg>;
	using mov_m_r32 = make_asm<0x89, asm_t::mem_reg>;
	using mov_r_m8 = make_asm<0x8A, asm_t::mem_reg>;
	using mov_r_m16 = make_asm<0x66, 0x8B, asm_t::mem_reg>;
	using mov_r_m32 = make_asm<0x8B, asm_t::mem_reg>;
	using mov_r_seg = make_asm<0x8C, asm_t::reg2mreg>;
	using mov_m_seg = make_asm<0x8C, asm_t::mem_reg>;
	using mov_seg_r = make_asm<0x8D, asm_t::mreg2reg>;
	using mov_seg_m = make_asm<0x8D, asm_t::mem_reg>;
	using mov_al_moffs = make_asm<0xA0, asm_t::dword>;
	using mov_ax_moffs = make_asm<0x66, 0xA1, asm_t::dword>;
	using mov_eax_moffs = make_asm<0xA1, asm_t::dword>;
	using mov_moffs_al = make_asm<0xA2, asm_t::dword>;
	using mov_moffs_ax = make_asm<0x66, 0xA3, asm_t::dword>;
	using mov_moffs_aeax = make_asm<0xA3, asm_t::dword>;
	using mov_r_i8 = make_asm<0xB0 | asm_t::op_reg, asm_t::byte>;
	using mov_r_i16 = make_asm<0x66, 0xB8 | asm_t::op_reg, asm_t::word>;
	using mov_r_i32 = make_asm<0xB8 | asm_t::op_reg, asm_t::dword>;
	using mov_m_i8 = make_asm<0xC6, asm_t::mem | 0, asm_t::byte>;
	using mov_m_i16 = make_asm<0x66, 0xC7, asm_t::mem | 0, asm_t::word>;
	using mov_m_i32 = make_asm<0xC7, asm_t::mem | 0, asm_t::dword>;
	using mov_r_cr = make_asm<0x0F, 0x20, asm_t::reg2mreg>;
	using mov_cr_r = make_asm<0x0F, 0x22, asm_t::mreg2reg>;
	using mov_r_dr = make_asm<0x0F, 0x21, asm_t::reg2mreg>;
	using mov_dr_r = make_asm<0x0F, 0x23, asm_t::mreg2reg>;
	using mov_r_tr = make_asm<0x0F, 0x24, asm_t::reg2mreg>;
	using mov_tr_r = make_asm<0x0F, 0x26, asm_t::mreg2reg>;
	using movsb = make_asm<0xA4>;
	using movsw = make_asm<0x66, 0xA5>;
	using movsd = make_asm<0xA5>;
	using movsx_r16_r8 = make_asm<0x66, 0x0F, 0xBE, asm_t::mreg2reg>;
	using movsx_r32_r8 = make_asm<0x0F, 0xBE, asm_t::mreg2reg>;
	using movsx_r32_r16 = make_asm<0x0F, 0xBF, asm_t::mreg2reg>;
	using movsx_r16_m8 = make_asm<0x66, 0x0F, 0xBE, asm_t::mem_reg>;
	using movsx_r32_m8 = make_asm<0x0F, 0xBE, asm_t::mem_reg>;
	using movsx_r32_m16 = make_asm<0x0F, 0xBF, asm_t::mem_reg>;
	using movzx_r16_r8 = make_asm<0x66, 0x0F, 0xB6, asm_t::mreg2reg>;
	using movzx_r32_r8 = make_asm<0x0F, 0xB6, asm_t::mreg2reg>;
	using movzx_r32_r16 = make_asm<0x0F, 0xB7, asm_t::mreg2reg>;
	using movzx_r16_m8 = make_asm<0x66, 0x0F, 0xB6, asm_t::mem_reg>;
	using movzx_r32_m8 = make_asm<0x0F, 0xB6, asm_t::mem_reg>;
	using movzx_r32_m16 = make_asm<0x0F, 0xB7, asm_t::mem_reg>;
	using mul_al_r8 = make_asm<0xF6, asm_t::reg | 4>;
	using mul_ax_r16 = make_asm<0x66, 0xF7, asm_t::reg | 4>;
	using mul_eax_r32 = make_asm<0xF7, asm_t::reg | 4>;
	using mul_al_m8 = make_asm<0xF6, asm_t::mem | 4>;
	using mul_ax_m16 = make_asm<0x66, 0xF7, asm_t::mem | 4>;
	using mul_eax_m32 = make_asm<0xF7, asm_t::mem | 4>;
	using neg_r8 = make_asm<0xF6, asm_t::reg | 3>;
	using neg_r16 = make_asm<0x66, 0xF7, asm_t::reg | 3>;
	using neg_r32 = make_asm<0xF7, asm_t::reg | 3>;
	using neg_m8 = make_asm<0xF6, asm_t::mem | 3>;
	using neg_m16 = make_asm<0x66, 0xF7, asm_t::mem | 3>;
	using neg_m32 = make_asm<0xF7, asm_t::mem | 3>;
	using nop = make_asm<0x90>;
	using not_r8 = make_asm<0xF6, asm_t::reg | 2>;
	using not_r16 = make_asm<0x66, 0xF7, asm_t::reg | 2>;
	using not_r32 = make_asm<0xF7, asm_t::reg | 2>;
	using not_m8 = make_asm<0xF6, asm_t::mem | 2>;
	using not_m16 = make_asm<0x66, 0xF7, asm_t::mem | 2>;
	using not_m32 = make_asm<0xF7, asm_t::mem | 2>;
	using or_al_i8 = make_asm<0x0C, asm_t::byte>;
	using or_ax_i16 = make_asm<0x66, 0x0D, asm_t::word>;
	using or_eax_i32 = make_asm<0x0D, asm_t::dword>;
	using or_r_i8 = make_asm<0x80, asm_t::reg | 1, asm_t::byte>;
	using or_r_i16 = make_asm<0x66, 0x81, asm_t::reg | 1, asm_t::word>;
	using or_r_i32 = make_asm<0x81, asm_t::reg | 1, asm_t::dword>;
	using or_r16_i8 = make_asm<0x66, 0x83, asm_t::reg | 1, asm_t::byte>;
	using or_r32_i8 = make_asm<0x83, asm_t::reg | 1, asm_t::byte>;
	using or_m_i8 = make_asm<0x80, asm_t::mem | 1, asm_t::byte>;
	using or_m_i16 = make_asm<0x66, 0x81, asm_t::mem | 1, asm_t::word>;
	using or_m_i32 = make_asm<0x81, asm_t::mem | 1, asm_t::dword>;
	using or_m16_i8 = make_asm<0x66, 0x83, asm_t::mem | 1, asm_t::byte>;
	using or_m32_i8 = make_asm<0x83, asm_t::mem | 1, asm_t::byte>;
	using or_r_r8 = make_asm<0x08, asm_t::reg2mreg>;
	using or_r_r16 = make_asm<0x66, 0x09, asm_t::reg2mreg>;
	using or_r_r32 = make_asm<0x09, asm_t::reg2mreg>;
	using or_m_r8 = make_asm<0x08, asm_t::mem_reg>;
	using or_m_r16 = make_asm<0x66, 0x09, asm_t::mem_reg>;
	using or_m_r32 = make_asm<0x09, asm_t::mem_reg>;
	using or_r_m8 = make_asm<0x0A, asm_t::mem_reg>;
	using or_r_m16 = make_asm<0x66, 0x0B, asm_t::mem_reg>;
	using or_r_m32 = make_asm<0x0B, asm_t::mem_reg>;
	using out_al = make_asm<0xE6, asm_t::byte>;
	using out_ax = make_asm<0x66, 0x75, asm_t::byte>;
	using out_eax = make_asm<0xE7, asm_t::byte>;
	using out_dx_al = make_asm<0xEE>;
	using out_dx_ax = make_asm<0x66, 0xEF>;
	using out_dx_eax = make_asm<0xEF>;
	using outsb = make_asm<0x6E>;
	using outsw = make_asm<0x66, 0x6F>;
	using outsd = make_asm<0x6F>;
	using pop_m16 = make_asm<0x66, 0x8F, asm_t::mem | 0>;
	using pop_m32 = make_asm<0x8F, asm_t::mem | 0>;
	using pop_r16 = make_asm<0x66, 0x58 | asm_t::op_reg>;
	using pop_r32 = make_asm<0x58 | asm_t::op_reg>;
	using pop_ds = make_asm<0x1F>;
	using pop_es = make_asm<0x07>;
	using pop_ss = make_asm<0x17>;
	using pop_fs = make_asm<0x0F, 0xA1>;
	using pop_gs = make_asm<0x0F, 0xA9>;
	using popa = make_asm<0x66, 0x61>;
	using popad = make_asm<0x61>;
	using popf = make_asm<0x66, 0x9D>;
	using popfd = make_asm<0x9D>;
	using push_m16 = make_asm<0x66, 0xFF, asm_t::mem | 6>;
	using push_m32 = make_asm<0xFF, asm_t::mem | 6>;
	using push_r16 = make_asm<0x66, 0x50 | asm_t::op_reg>;
	using push_r32 = make_asm<0x50 | asm_t::op_reg>;
	using push_i8 = make_asm<0x6A, asm_t::byte>;
	using push_i16 = make_asm<0x66, 0x68, asm_t::word>;
	using push_i32 = make_asm<0x68, asm_t::dword>;
	using push_cs = make_asm<0x0E>;
	using push_ds = make_asm<0x1E>;
	using push_es = make_asm<0x06>;
	using push_ss = make_asm<0x16>;
	using push_fs = make_asm<0x0F, 0xA0>;
	using push_gs = make_asm<0x0F, 0xA8>;
	using pusha = make_asm<0x66, 0x60>;
	using pushad = make_asm<0x60>;
	using pushf = make_asm<0x66, 0x9C>;
	using pushfd = make_asm<0x9C>;
	using rcl_r8_1 = make_asm<0xD0, asm_t::reg | 2>;
	using rcl_r8_cl = make_asm<0xD2, asm_t::reg | 2>;
	using rcl_r8_i = make_asm<0xC0, asm_t::reg | 2, asm_t::byte>;
	using rcl_r16_1 = make_asm<0x66, 0xD1, asm_t::reg | 2>;
	using rcl_r16_cl = make_asm<0x66, 0xD3, asm_t::reg | 2>;
	using rcl_r16_i = make_asm<0x66, 0xC1, asm_t::reg | 2, asm_t::word>;
	using rcl_r32_1 = make_asm<0xD1, asm_t::reg | 2>;
	using rcl_r32_cl = make_asm<0xD3, asm_t::reg | 2>;
	using rcl_r32_i = make_asm<0xC1, asm_t::reg | 2, asm_t::dword>;
	using rcl_m8_1 = make_asm<0xD0, asm_t::mem | 2>;
	using rcl_m8_cl = make_asm<0xD2, asm_t::mem | 2>;
	using rcl_m8_i = make_asm<0xC0, asm_t::mem | 2, asm_t::byte>;
	using rcl_m16_1 = make_asm<0x66, 0xD1, asm_t::mem | 2>;
	using rcl_m16_cl = make_asm<0x66, 0xD3, asm_t::mem | 2>;
	using rcl_m16_i = make_asm<0x66, 0xC1, asm_t::mem | 2, asm_t::word>;
	using rcl_m32_1 = make_asm<0xD1, asm_t::mem | 2>;
	using rcl_m32_cl = make_asm<0xD3, asm_t::mem | 2>;
	using rcl_m32_i = make_asm<0xC1, asm_t::mem | 2, asm_t::dword>;
	using rcr_r8_1 = make_asm<0xD0, asm_t::reg | 3>;
	using rcr_r8_cl = make_asm<0xD2, asm_t::reg | 3>;
	using rcr_r8_i = make_asm<0xC0, asm_t::reg | 3, asm_t::byte>;
	using rcr_r16_1 = make_asm<0x66, 0xD1, asm_t::reg | 3>;
	using rcr_r16_cl = make_asm<0x66, 0xD3, asm_t::reg | 3>;
	using rcr_r16_i = make_asm<0x66, 0xC1, asm_t::reg | 3, asm_t::word>;
	using rcr_r32_1 = make_asm<0xD1, asm_t::reg | 3>;
	using rcr_r32_cl = make_asm<0xD3, asm_t::reg | 3>;
	using rcr_r32_i = make_asm<0xC1, asm_t::reg | 3, asm_t::dword>;
	using rcr_m8_1 = make_asm<0xD0, asm_t::mem | 3>;
	using rcr_m8_cl = make_asm<0xD2, asm_t::mem | 3>;
	using rcr_m8_i = make_asm<0xC0, asm_t::mem | 3, asm_t::byte>;
	using rcr_m16_1 = make_asm<0x66, 0xD1, asm_t::mem | 3>;
	using rcr_m16_cl = make_asm<0x66, 0xD3, asm_t::mem | 3>;
	using rcr_m16_i = make_asm<0x66, 0xC1, asm_t::mem | 3, asm_t::word>;
	using rcr_m32_1 = make_asm<0xD1, asm_t::mem | 3>;
	using rcr_m32_cl = make_asm<0xD3, asm_t::mem | 3>;
	using rcr_m32_i = make_asm<0xC1, asm_t::mem | 3, asm_t::dword>;
	using rol_r8_1 = make_asm<0xD0, asm_t::reg | 0>;
	using rol_r8_cl = make_asm<0xD2, asm_t::reg | 0>;
	using rol_r8_i = make_asm<0xC0, asm_t::reg | 0, asm_t::byte>;
	using rol_r16_1 = make_asm<0x66, 0xD1, asm_t::reg | 0>;
	using rol_r16_cl = make_asm<0x66, 0xD3, asm_t::reg | 0>;
	using rol_r16_i = make_asm<0x66, 0xC1, asm_t::reg | 0, asm_t::word>;
	using rol_r32_1 = make_asm<0xD1, asm_t::reg | 0>;
	using rol_r32_cl = make_asm<0xD3, asm_t::reg | 0>;
	using rol_r32_i = make_asm<0xC1, asm_t::reg | 0, asm_t::dword>;
	using rol_m8_1 = make_asm<0xD0, asm_t::mem | 0>;
	using rol_m8_cl = make_asm<0xD2, asm_t::mem | 0>;
	using rol_m8_i = make_asm<0xC0, asm_t::mem | 0, asm_t::byte>;
	using rol_m16_1 = make_asm<0x66, 0xD1, asm_t::mem | 0>;
	using rol_m16_cl = make_asm<0x66, 0xD3, asm_t::mem | 0>;
	using rol_m16_i = make_asm<0x66, 0xC1, asm_t::mem | 0, asm_t::word>;
	using rol_m32_1 = make_asm<0xD1, asm_t::mem | 0>;
	using rol_m32_cl = make_asm<0xD3, asm_t::mem | 0>;
	using rol_m32_i = make_asm<0xC1, asm_t::mem | 0, asm_t::dword>;
	using ror_r8_1 = make_asm<0xD0, asm_t::reg | 1>;
	using ror_r8_cl = make_asm<0xD2, asm_t::reg | 1>;
	using ror_r8_i = make_asm<0xC0, asm_t::reg | 1, asm_t::byte>;
	using ror_r16_1 = make_asm<0x66, 0xD1, asm_t::reg | 1>;
	using ror_r16_cl = make_asm<0x66, 0xD3, asm_t::reg | 1>;
	using ror_r16_i = make_asm<0x66, 0xC1, asm_t::reg | 1, asm_t::word>;
	using ror_r32_1 = make_asm<0xD1, asm_t::reg | 1>;
	using ror_r32_cl = make_asm<0xD3, asm_t::reg | 1>;
	using ror_r32_i = make_asm<0xC1, asm_t::reg | 1, asm_t::dword>;
	using ror_m8_1 = make_asm<0xD0, asm_t::mem | 1>;
	using ror_m8_cl = make_asm<0xD2, asm_t::mem | 1>;
	using ror_m8_i = make_asm<0xC0, asm_t::mem | 1, asm_t::byte>;
	using ror_m16_1 = make_asm<0x66, 0xD1, asm_t::mem | 1>;
	using ror_m16_cl = make_asm<0x66, 0xD3, asm_t::mem | 1>;
	using ror_m16_i = make_asm<0x66, 0xC1, asm_t::mem | 1, asm_t::word>;
	using ror_m32_1 = make_asm<0xD1, asm_t::mem | 1>;
	using ror_m32_cl = make_asm<0xD3, asm_t::mem | 1>;
	using ror_m32_i = make_asm<0xC1, asm_t::mem | 1, asm_t::dword>;
	using repe = make_asm<0xF3>;
	using repne = make_asm<0xF2>;
	using ret = make_asm<0xC3>;
	using ret_far = make_asm<0xCB>;
	using ret_i16 = make_asm<0xC2, asm_t::word>;
	using ret_far_i16 = make_asm<0xCA, asm_t::word>;
	using sahf = make_asm<0x9E>;
	using sal_r8_1 = make_asm<0xD0, asm_t::reg | 4>;
	using sal_r8_cl = make_asm<0xD2, asm_t::reg | 4>;
	using sal_r8_i = make_asm<0xC0, asm_t::reg | 4, asm_t::byte>;
	using sal_r16_1 = make_asm<0x66, 0xD1, asm_t::reg | 4>;
	using sal_r16_cl = make_asm<0x66, 0xD3, asm_t::reg | 4>;
	using sal_r16_i = make_asm<0x66, 0xC1, asm_t::reg | 4, asm_t::word>;
	using sal_r32_1 = make_asm<0xD1, asm_t::reg | 4>;
	using sal_r32_cl = make_asm<0xD3, asm_t::reg | 4>;
	using sal_r32_i = make_asm<0xC1, asm_t::reg | 4, asm_t::dword>;
	using sal_m8_1 = make_asm<0xD0, asm_t::mem | 4>;
	using sal_m8_cl = make_asm<0xD2, asm_t::mem | 4>;
	using sal_m8_i = make_asm<0xC0, asm_t::mem | 4, asm_t::byte>;
	using sal_m16_1 = make_asm<0x66, 0xD1, asm_t::mem | 4>;
	using sal_m16_cl = make_asm<0x66, 0xD3, asm_t::mem | 4>;
	using sal_m16_i = make_asm<0x66, 0xC1, asm_t::mem | 4, asm_t::word>;
	using sal_m32_1 = make_asm<0xD1, asm_t::mem | 4>;
	using sal_m32_cl = make_asm<0xD3, asm_t::mem | 4>;
	using sal_m32_i = make_asm<0xC1, asm_t::mem | 4, asm_t::dword>;
	using sar_r8_1 = make_asm<0xD0, asm_t::reg | 7>;
	using sar_r8_cl = make_asm<0xD2, asm_t::reg | 7>;
	using sar_r8_i = make_asm<0xC0, asm_t::reg | 7, asm_t::byte>;
	using sar_r16_1 = make_asm<0x66, 0xD1, asm_t::reg | 7>;
	using sar_r16_cl = make_asm<0x66, 0xD3, asm_t::reg | 7>;
	using sar_r16_i = make_asm<0x66, 0xC1, asm_t::reg | 7, asm_t::word>;
	using sar_r32_1 = make_asm<0xD1, asm_t::reg | 7>;
	using sar_r32_cl = make_asm<0xD3, asm_t::reg | 7>;
	using sar_r32_i = make_asm<0xC1, asm_t::reg | 7, asm_t::dword>;
	using sar_m8_1 = make_asm<0xD0, asm_t::mem | 7>;
	using sar_m8_cl = make_asm<0xD2, asm_t::mem | 7>;
	using sar_m8_i = make_asm<0xC0, asm_t::mem | 7, asm_t::byte>;
	using sar_m16_1 = make_asm<0x66, 0xD1, asm_t::mem | 7>;
	using sar_m16_cl = make_asm<0x66, 0xD3, asm_t::mem | 7>;
	using sar_m16_i = make_asm<0x66, 0xC1, asm_t::mem | 7, asm_t::word>;
	using sar_m32_1 = make_asm<0xD1, asm_t::mem | 7>;
	using sar_m32_cl = make_asm<0xD3, asm_t::mem | 7>;
	using sar_m32_i = make_asm<0xC1, asm_t::mem | 7, asm_t::dword>;
	using shl_r8_1 = make_asm<0xD0, asm_t::reg | 4>;
	using shl_r8_cl = make_asm<0xD2, asm_t::reg | 4>;
	using shl_r8_i = make_asm<0xC0, asm_t::reg | 4, asm_t::byte>;
	using shl_r16_1 = make_asm<0x66, 0xD1, asm_t::reg | 4>;
	using shl_r16_cl = make_asm<0x66, 0xD3, asm_t::reg | 4>;
	using shl_r16_i = make_asm<0x66, 0xC1, asm_t::reg | 4, asm_t::word>;
	using shl_r32_1 = make_asm<0xD1, asm_t::reg | 4>;
	using shl_r32_cl = make_asm<0xD3, asm_t::reg | 4>;
	using shl_r32_i = make_asm<0xC1, asm_t::reg | 4, asm_t::dword>;
	using shl_m8_1 = make_asm<0xD0, asm_t::mem | 4>;
	using shl_m8_cl = make_asm<0xD2, asm_t::mem | 4>;
	using shl_m8_i = make_asm<0xC0, asm_t::mem | 4, asm_t::byte>;
	using shl_m16_1 = make_asm<0x66, 0xD1, asm_t::mem | 4>;
	using shl_m16_cl = make_asm<0x66, 0xD3, asm_t::mem | 4>;
	using shl_m16_i = make_asm<0x66, 0xC1, asm_t::mem | 4, asm_t::word>;
	using shl_m32_1 = make_asm<0xD1, asm_t::mem | 4>;
	using shl_m32_cl = make_asm<0xD3, asm_t::mem | 4>;
	using shl_m32_i = make_asm<0xC1, asm_t::mem | 4, asm_t::dword>;
	using shr_r8_1 = make_asm<0xD0, asm_t::reg | 5>;
	using shr_r8_cl = make_asm<0xD2, asm_t::reg | 5>;
	using shr_r8_i = make_asm<0xC0, asm_t::reg | 5, asm_t::byte>;
	using shr_r16_1 = make_asm<0x66, 0xD1, asm_t::reg | 5>;
	using shr_r16_cl = make_asm<0x66, 0xD3, asm_t::reg | 5>;
	using shr_r16_i = make_asm<0x66, 0xC1, asm_t::reg | 5, asm_t::word>;
	using shr_r32_1 = make_asm<0xD1, asm_t::reg | 5>;
	using shr_r32_cl = make_asm<0xD3, asm_t::reg | 5>;
	using shr_r32_i = make_asm<0xC1, asm_t::reg | 5, asm_t::dword>;
	using shr_m8_1 = make_asm<0xD0, asm_t::mem | 5>;
	using shr_m8_cl = make_asm<0xD2, asm_t::mem | 5>;
	using shr_m8_i = make_asm<0xC0, asm_t::mem | 5, asm_t::byte>;
	using shr_m16_1 = make_asm<0x66, 0xD1, asm_t::mem | 5>;
	using shr_m16_cl = make_asm<0x66, 0xD3, asm_t::mem | 5>;
	using shr_m16_i = make_asm<0x66, 0xC1, asm_t::mem | 5, asm_t::word>;
	using shr_m32_1 = make_asm<0xD1, asm_t::mem | 5>;
	using shr_m32_cl = make_asm<0xD3, asm_t::mem | 5>;
	using shr_m32_i = make_asm<0xC1, asm_t::mem | 5, asm_t::dword>;
	using sbb_al_i8 = make_asm<0x1C, asm_t::byte>;
	using sbb_ax_i16 = make_asm<0x66, 0x1D, asm_t::word>;
	using sbb_eax_i32 = make_asm<0x1D, asm_t::dword>;
	using sbb_r_i8 = make_asm<0x80, asm_t::reg | 3, asm_t::byte>;
	using sbb_r_i16 = make_asm<0x66, 0x81, asm_t::reg | 3, asm_t::word>;
	using sbb_r_i32 = make_asm<0x81, asm_t::reg | 3, asm_t::dword>;
	using sbb_r16_i8 = make_asm<0x66, 0x83, asm_t::reg | 3, asm_t::byte>;
	using sbb_r32_i8 = make_asm<0x83, asm_t::reg | 3, asm_t::byte>;
	using sbb_m_i8 = make_asm<0x80, asm_t::mem | 3, asm_t::byte>;
	using sbb_m_i16 = make_asm<0x66, 0x81, asm_t::mem | 3, asm_t::word>;
	using sbb_m_i32 = make_asm<0x81, asm_t::mem | 3, asm_t::dword>;
	using sbb_m16_i8 = make_asm<0x66, 0x83, asm_t::mem | 3, asm_t::byte>;
	using sbb_m32_i8 = make_asm<0x83, asm_t::mem | 3, asm_t::byte>;
	using sbb_r_r8 = make_asm<0x18, asm_t::reg2mreg>;
	using sbb_r_r16 = make_asm<0x66, 0x19, asm_t::reg2mreg>;
	using sbb_r_r32 = make_asm<0x19, asm_t::reg2mreg>;
	using sbb_m_r8 = make_asm<0x18, asm_t::mem_reg>;
	using sbb_m_r16 = make_asm<0x66, 0x19, asm_t::mem_reg>;
	using sbb_m_r32 = make_asm<0x19, asm_t::mem_reg>;
	using sbb_r_m8 = make_asm<0x1A, asm_t::mem_reg>;
	using sbb_r_m16 = make_asm<0x66, 0x1B, asm_t::mem_reg>;
	using sbb_r_m32 = make_asm<0x1B, asm_t::mem_reg>;
	using scasb = make_asm<0xAE>;
	using scasw = make_asm<0x66, 0xAF>;
	using scasd = make_asm<0xAF>;
	using seta_r = make_asm<0x0F, 0x97, asm_t::reg>;
	using seta_m = make_asm<0x0F, 0x97, asm_t::mem>;
	using setae_r = make_asm<0x0F, 0x93, asm_t::reg>;
	using setae_m = make_asm<0x0F, 0x93, asm_t::mem>;
	using setb_r = make_asm<0x0F, 0x92, asm_t::reg>;
	using setb_m = make_asm<0x0F, 0x92, asm_t::mem>;
	using setbe_r = make_asm<0x0F, 0x96, asm_t::reg>;
	using setbe_m = make_asm<0x0F, 0x96, asm_t::mem>;
	using setc_r = make_asm<0x0F, 0x92, asm_t::reg>;
	using setc_m = make_asm<0x0F, 0x92, asm_t::mem>;
	using sete_r = make_asm<0x0F, 0x94, asm_t::reg>;
	using sete_m = make_asm<0x0F, 0x94, asm_t::mem>;
	using setg_r = make_asm<0x0F, 0x9F, asm_t::reg>;
	using setg_m = make_asm<0x0F, 0x9F, asm_t::mem>;
	using setge_r = make_asm<0x0F, 0x9D, asm_t::reg>;
	using setge_m = make_asm<0x0F, 0x9D, asm_t::mem>;
	using setl_r = make_asm<0x0F, 0x9C, asm_t::reg>;
	using setl_m = make_asm<0x0F, 0x9C, asm_t::mem>;
	using setle_r = make_asm<0x0F, 0x9E, asm_t::reg>;
	using setle_m = make_asm<0x0F, 0x9E, asm_t::mem>;
	using setna_r = make_asm<0x0F, 0x96, asm_t::reg>;
	using setna_m = make_asm<0x0F, 0x96, asm_t::mem>;
	using setnae_r = make_asm<0x0F, 0x92, asm_t::reg>;
	using setnae_m = make_asm<0x0F, 0x92, asm_t::mem>;
	using setnb_r = make_asm<0x0F, 0x93, asm_t::reg>;
	using setnb_m = make_asm<0x0F, 0x93, asm_t::mem>;
	using setnbe_r = make_asm<0x0F, 0x97, asm_t::reg>;
	using setnbe_m = make_asm<0x0F, 0x97, asm_t::mem>;
	using setnc_r = make_asm<0x0F, 0x93, asm_t::reg>;
	using setnc_m = make_asm<0x0F, 0x93, asm_t::mem>;
	using setne_r = make_asm<0x0F, 0x95, asm_t::reg>;
	using setne_m = make_asm<0x0F, 0x95, asm_t::mem>;
	using setng_r = make_asm<0x0F, 0x9E, asm_t::reg>;
	using setng_m = make_asm<0x0F, 0x9E, asm_t::mem>;
	using setnge_r = make_asm<0x0F, 0x9C, asm_t::reg>;
	using setnge_m = make_asm<0x0F, 0x9C, asm_t::mem>;
	using setnl_r = make_asm<0x0F, 0x9D, asm_t::reg>;
	using setnl_m = make_asm<0x0F, 0x9D, asm_t::mem>;
	using setnle_r = make_asm<0x0F, 0x9F, asm_t::reg>;
	using setnle_m = make_asm<0x0F, 0x9F, asm_t::mem>;
	using setno_r = make_asm<0x0F, 0x91, asm_t::reg>;
	using setno_m = make_asm<0x0F, 0x91, asm_t::mem>;
	using setnp_r = make_asm<0x0F, 0x9B, asm_t::reg>;
	using setnp_m = make_asm<0x0F, 0x9B, asm_t::mem>;
	using setns_r = make_asm<0x0F, 0x99, asm_t::reg>;
	using setns_m = make_asm<0x0F, 0x99, asm_t::mem>;
	using setnz_r = make_asm<0x0F, 0x95, asm_t::reg>;
	using setnz_m = make_asm<0x0F, 0x95, asm_t::mem>;
	using seto_r = make_asm<0x0F, 0x90, asm_t::reg>;
	using seto_m = make_asm<0x0F, 0x90, asm_t::mem>;
	using setp_r = make_asm<0x0F, 0x9A, asm_t::reg>;
	using setp_m = make_asm<0x0F, 0x9A, asm_t::mem>;
	using setpe_r = make_asm<0x0F, 0x9A, asm_t::reg>;
	using setpe_m = make_asm<0x0F, 0x9A, asm_t::mem>;
	using setpo_r = make_asm<0x0F, 0x9B, asm_t::reg>;
	using setpo_m = make_asm<0x0F, 0x9B, asm_t::mem>;
	using sets_r = make_asm<0x0F, 0x98, asm_t::reg>;
	using sets_m = make_asm<0x0F, 0x98, asm_t::mem>;
	using setz_r = make_asm<0x0F, 0x94, asm_t::reg>;
	using setz_m = make_asm<0x0F, 0x94, asm_t::mem>;
	using sgdt = make_asm<0x0F, 0x01, asm_t::mem | 0>;
	using sidt = make_asm<0x0F, 0x01, asm_t::mem | 1>;
	using shld_r_r16_i8 = make_asm<0x66, 0x0F, 0xA4, asm_t::reg2mreg, asm_t::byte>;
	using shld_r_r32_i8 = make_asm<0x0F, 0xA4, asm_t::reg2mreg, asm_t::byte>;
	using shld_r_r16_cl = make_asm<0x66, 0x0F, 0xA5, asm_t::reg2mreg>;
	using shld_r_r32_cl = make_asm<0x0F, 0xA5, asm_t::reg2mreg>;
	using shld_m_r16_i8 = make_asm<0x66, 0x0F, 0xA4, asm_t::mem_reg, asm_t::byte>;
	using shld_m_r32_i8 = make_asm<0x0F, 0xA4, asm_t::mem_reg, asm_t::byte>;
	using shld_m_r16_cl = make_asm<0x66, 0x0F, 0xA5, asm_t::mem_reg>;
	using shld_m_r32_cl = make_asm<0x0F, 0xA5, asm_t::mem_reg>;
	using shrd_r_r16_i8 = make_asm<0x66, 0x0F, 0xAC, asm_t::reg2mreg, asm_t::byte>;
	using shrd_r_r32_i8 = make_asm<0x0F, 0xAC, asm_t::reg2mreg, asm_t::byte>;
	using shrd_r_r16_cl = make_asm<0x66, 0x0F, 0xAD, asm_t::reg2mreg>;
	using shrd_r_r32_cl = make_asm<0x0F, 0xAD, asm_t::reg2mreg>;
	using shrd_m_r16_i8 = make_asm<0x66, 0x0F, 0xAC, asm_t::mem_reg, asm_t::byte>;
	using shrd_m_r32_i8 = make_asm<0x0F, 0xAC, asm_t::mem_reg, asm_t::byte>;
	using shrd_m_r16_cl = make_asm<0x66, 0x0F, 0xAD, asm_t::mem_reg>;
	using shrd_m_r32_cl = make_asm<0x0F, 0xAD, asm_t::mem_reg>;
	using sldt_r = make_asm<0x0F, 0x00, asm_t::reg | 0>;
	using sldt_m = make_asm<0x0F, 0x00, asm_t::mem | 0>;
	using smsw_r = make_asm<0x0F, 0x01, asm_t::reg | 4>;
	using smsw_m = make_asm<0x0F, 0x01, asm_t::mem | 4>;
	using stc = make_asm<0xF9>;
	using std = make_asm<0xFD>;
	using sti = make_asm<0xFB>;
	using stosb = make_asm<0xAA>;
	using stosw = make_asm<0x66, 0xAB>;
	using stosd = make_asm<0xAB>;
	using str_r = make_asm<0x0F, 0x00, asm_t::reg | 1>;
	using str_m = make_asm<0x0F, 0x00, asm_t::mem | 1>;
	using sub_al_i8 = make_asm<0x2C, asm_t::byte>;
	using sub_ax_i16 = make_asm<0x66, 0x2D, asm_t::word>;
	using sub_eax_i32 = make_asm<0x2D, asm_t::dword>;
	using sub_r_i8 = make_asm<0x80, asm_t::reg | 5, asm_t::byte>;
	using sub_r_i16 = make_asm<0x66, 0x81, asm_t::reg | 5, asm_t::word>;
	using sub_r_i32 = make_asm<0x81, asm_t::reg | 5, asm_t::dword>;
	using sub_r16_i8 = make_asm<0x66, 0x83, asm_t::reg | 5, asm_t::byte>;
	using sub_r32_i8 = make_asm<0x83, asm_t::reg | 5, asm_t::byte>;
	using sub_m_i8 = make_asm<0x80, asm_t::mem | 5, asm_t::byte>;
	using sub_m_i16 = make_asm<0x66, 0x81, asm_t::mem | 5, asm_t::word>;
	using sub_m_i32 = make_asm<0x81, asm_t::mem | 5, asm_t::dword>;
	using sub_m16_i8 = make_asm<0x66, 0x83, asm_t::mem | 5, asm_t::byte>;
	using sub_m32_i8 = make_asm<0x83, asm_t::mem | 5, asm_t::byte>;
	using sub_r_r8 = make_asm<0x28, asm_t::reg2mreg>;
	using sub_r_r16 = make_asm<0x66, 0x29, asm_t::reg2mreg>;
	using sub_r_r32 = make_asm<0x29, asm_t::reg2mreg>;
	using sub_m_r8 = make_asm<0x28, asm_t::mem_reg>;
	using sub_m_r16 = make_asm<0x66, 0x29, asm_t::mem_reg>;
	using sub_m_r32 = make_asm<0x29, asm_t::mem_reg>;
	using sub_r_m8 = make_asm<0x2A, asm_t::mem_reg>;
	using sub_r_m16 = make_asm<0x66, 0x2B, asm_t::mem_reg>;
	using sub_r_m32 = make_asm<0x2B, asm_t::mem_reg>;
	using test_al_i8 = make_asm<0xA8, asm_t::byte>;
	using test_ax_i16 = make_asm<0x66, 0xA9, asm_t::word>;
	using test_eax_i32 = make_asm<0xA9, asm_t::dword>;
	using test_r_i8 = make_asm<0xF6, asm_t::reg | 0, asm_t::byte>;
	using test_r_i16 = make_asm<0x66, 0xF7, asm_t::reg | 0, asm_t::word>;
	using test_r_i32 = make_asm<0xF7, asm_t::reg | 0, asm_t::word>;
	using test_m_i8 = make_asm<0xF6, asm_t::mem | 0, asm_t::byte>;
	using test_m_i16 = make_asm<0x66, 0xF7, asm_t::mem | 0, asm_t::word>;
	using test_m_i32 = make_asm<0xF7, asm_t::mem | 0, asm_t::word>;
	using test_r_r8 = make_asm<0x84, asm_t::reg2mreg>;
	using test_r_r16 = make_asm<0x66, 0x85, asm_t::reg2mreg>;
	using test_r_r32 = make_asm<0x85, asm_t::reg2mreg>;
	using test_m_r8 = make_asm<0x84, asm_t::mem_reg>;
	using test_m_r16 = make_asm<0x66, 0x85, asm_t::mem_reg>;
	using test_m_r32 = make_asm<0x85, asm_t::mem_reg>;
	using verr_r = make_asm<0x0F, 0x00, asm_t::reg | 4>;
	using verr_m = make_asm<0x0F, 0x00, asm_t::mem | 4>;
	using verw_r = make_asm<0x0F, 0x00, asm_t::reg | 5>;
	using verw_m = make_asm<0x0F, 0x00, asm_t::mem | 5>;
	using wait = make_asm<0x9B>;
	using xchg_ax_r16 = make_asm<0x66, 0x90 | asm_t::op_reg>;
	using xchg_ax_r32 = make_asm<0x90 | asm_t::op_reg>;
	using xchg_r_r8 = make_asm<0x86, asm_t::reg2mreg>;
	using xchg_r_r16 = make_asm<0x66, 0x87, asm_t::reg2mreg>;
	using xchg_r_r32 = make_asm<0x87, asm_t::reg2mreg>;
	using xchg_m_r8 = make_asm<0x86, asm_t::mem_reg>;
	using xchg_m_r16 = make_asm<0x66, 0x87, asm_t::mem_reg>;
	using xchg_m_r32 = make_asm<0x87, asm_t::mem_reg>;
	using xlat = make_asm<0xD7>;
	using xor_al_i8 = make_asm<0x34, asm_t::byte>;
	using xor_ax_i16 = make_asm<0x66, 0x35, asm_t::word>;
	using xor_eax_i32 = make_asm<0x35, asm_t::dword>;
	using xor_r_i8 = make_asm<0x80, asm_t::reg | 6, asm_t::byte>;
	using xor_r_i16 = make_asm<0x66, 0x81, asm_t::reg | 6, asm_t::word>;
	using xor_r_i32 = make_asm<0x81, asm_t::reg | 6, asm_t::dword>;
	using xor_r16_i8 = make_asm<0x66, 0x83, asm_t::reg | 6, asm_t::byte>;
	using xor_r32_i8 = make_asm<0x83, asm_t::reg | 6, asm_t::byte>;
	using xor_m_i8 = make_asm<0x80, asm_t::mem | 6, asm_t::byte>;
	using xor_m_i16 = make_asm<0x66, 0x81, asm_t::mem | 6, asm_t::word>;
	using xor_m_i32 = make_asm<0x81, asm_t::mem | 6, asm_t::dword>;
	using xor_m16_i8 = make_asm<0x66, 0x83, asm_t::mem | 6, asm_t::byte>;
	using xor_m32_i8 = make_asm<0x83, asm_t::mem | 6, asm_t::byte>;
	using xor_r_r8 = make_asm<0x30, asm_t::reg2mreg>;
	using xor_r_r16 = make_asm<0x66, 0x31, asm_t::reg2mreg>;
	using xor_r_r32 = make_asm<0x31, asm_t::reg2mreg>;
	using xor_m_r8 = make_asm<0x30, asm_t::mem_reg>;
	using xor_m_r16 = make_asm<0x66, 0x31, asm_t::mem_reg>;
	using xor_m_r32 = make_asm<0x31, asm_t::mem_reg>;
	using xor_r_m8 = make_asm<0x32, asm_t::mem_reg>;
	using xor_r_m16 = make_asm<0x66, 0x33, asm_t::mem_reg>;
	using xor_r_m32 = make_asm<0x33, asm_t::mem_reg>;
}
